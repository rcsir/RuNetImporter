                
	private StreamWriter photoStreamWriter;

				
				
				
	this.totalCount = 0;
    this.currentOffset = 0;
    this.step = 1;

    var pInfo = new PhotoInfo();
    String fName = Utils.GenerateFileName(this.WorkingFolderTextBox.Text, groupId, pInfo); 
    photoStreamWriter = File.CreateText(fName);
    Utils.PrintFileHeader(photoStreamWriter, pInfo);
    long tlc = 0;
    long oldOffset = 0;

    bw.ReportProgress(-1, "Getting pics");

    while (isRunning)
    {
        if (bw.CancellationPending)
            break;

        if (currentOffset > totalCount)
        {
            // done
            break;
        }

        sb.Length = 0;
        sb.Append("lat=").Append("59.935634").Append("&");
        sb.Append("long=").Append("30.325935").Append("&");
        sb.Append("radius=").Append(100).Append("&");
        sb.Append("count=").Append(POSTS_PER_REQUEST).Append("&");
        sb.Append("offset=").Append(currentOffset);
        context.Parameters = sb.ToString();
        Debug.WriteLine("Download parameters: " + context.Parameters);

        oldOffset = currentOffset;
        context.Cookie = currentOffset.ToString();

        // play nice, sleep for 1/3 sec to stay within 3 requests/second limits
        tlc = Utils.sleepTime(tlc);
        // call VK REST API
        vkRestApi.CallVkFunction(VkFunction.PhotosSearch, context);

        // wait for the user data
        ReadyEvent.WaitOne();

        bw.ReportProgress((int)((currentOffset - oldOffset)*10000/totalCount), "Getting " + currentOffset + " pics out of " + totalCount);
    }

    photoStreamWriter.Close();


	        // process photo search
        private void OnPhotosSearch(JObject data, string cookie)
        {
            if (data[VkRestApi.RESPONSE_BODY] == null)
            {
                this.isRunning = false;
                return;
            }

            if (this.totalCount == 0)
            {
                this.totalCount = data[VkRestApi.RESPONSE_BODY]["count"].ToObject<long>();
                if (this.totalCount == 0)
                {
                    this.isRunning = false;
                    return;
                }
            }

            // now calc items in response
            int count = data[VkRestApi.RESPONSE_BODY]["items"].Count();
            
            // increment current offset by actual items received
            this.currentOffset += count;

            var photos = new List<PhotoInfo>();

            // process response body
            for (int i = 0; i < count; ++i)
            {
                var postObj = data[VkRestApi.RESPONSE_BODY]["items"][i].ToObject<JObject>();
                var photo = new PhotoInfo();
                photo.Id = Utils.getLongField("id", postObj);
                photo.AlbumId = Utils.getLongField("album_id", postObj);
                photo.OwnerId = Utils.getLongField("from_id", postObj);

                photo.Photo130 = Utils.getStringField("photo_130", postObj);
                
                photo.Width = Utils.getLongField("width", postObj);
                photo.Height = Utils.getLongField("height", postObj);
                // post date
                photo.Date = Utils.getStringDateField("date", postObj);
                // photo text
                photo.Text = Utils.getTextField("text", postObj);
                photo.Latit = Utils.getStringField("lat", postObj);
                photo.Longit = Utils.getStringField("long", postObj);

                
                photos.Add(photo);
            }

            // save the board photoInfo
            updatePhotoFile(photos, photoStreamWriter);
        }


		        // photos
        private string generatePhotoFileName(decimal groupId)
        {
            var fileName = new StringBuilder();

            fileName.Append("\\").Append("PhotoInfo").Append("-info");
            fileName.Append(".txt");

            return fileName.ToString();
        }

        private void printPhotoHeader(StreamWriter writer)
        {
        }

        
        private void updatePhotoFile(IEnumerable<PhotoInfo> photoInfo, StreamWriter writer)
        {
            foreach (var c in photoInfo)
            {
                
            }
        }
